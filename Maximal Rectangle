#include<bits/stdc++.h>
int largestRectangleArea(vector<int>& heights) {
        //next smaller
        stack<int>s1,s2;
        vector<int>ns,ps;
        int n=heights.size();
        for(int i=n-1;i>=0;i--)
        {
            while(!s1.empty() && heights[i]<=heights[s1.top()])
            {
                s1.pop();
            }
            if(s1.empty())
            {
                ns.push_back(n);
            }
                
            else
            {
                ns.push_back(s1.top());
            }
            s1.push(i);
        }
        reverse(ns.begin(),ns.end());
        
        //previous smaller
        
        for(int i=0;i<n;i++)
        {
            while(!s2.empty() && heights[i]<=heights[s2.top()])
            {
                s2.pop();
            }
            if(s2.empty())
                ps.push_back(-1);
            else
            {
                ps.push_back(s2.top());
            }
            s2.push(i);
        }
        
        int maxa=0;
        for(int i=0;i<n;i++)
        {
            maxa=max(maxa,heights[i]*(ns[i]-ps[i]-1));
        }
        return maxa;
        
}
int maximalAreaOfSubMatrixOfAll1(vector<vector<int>> &mat, int n, int m){
	// Write your code here.
	int area=0;
	vector<int>heights(m,0);
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(mat[i][j]==1)
			heights[j]+=1;
			else
			heights[j]=0;
		}
		int res=largestRectangleArea(heights);
		area=max(res,area);

	}
	return area;
}
