For strings:

#include <bits/stdc++.h> 
#include<string>
void permu(vector<char>&v,map<int,int>&mp,string &dp,vector<string>&res,int n)
{
    if(dp.size()==n)
    {
        res.push_back(dp);
        return;
    }
    for(int i=0;i<n;i++)
    {
        if(mp[i]!=1)
        {
            dp.push_back(v[i]);
            mp[i]=1;
            permu(v,mp,dp,res,n);
            dp.pop_back();
            mp[i]=0;
        }
    }
}
vector<string> findPermutations(string &s) {
    // Write your code here.
    int n=s.length();
    std::map<int,int>mp;
    vector<char>v;
    string dp="";
    vector<string>res;
    for(int i=0;i<n;i++)
    {
        v.push_back(s[i]);
    }
    permu(v,mp,dp,res,n);
    return res;
}


for arrays:

class Solution {
public:
    void permu(vector<int>&nums,vector<int>&dp,vector<vector<int>>&res,map<int,int>&mp,int n)
    {
        if(dp.size()==n)
        {
            res.push_back(dp);
            return;
        }
        for(int i=0;i<n;i++)
        {
            if(mp[i]!=1)
            {
                dp.push_back(nums[i]);
                mp[i]=1;
                permu(nums,dp,res,mp,n);
                dp.pop_back();
                mp[i]=0;
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<int>dp;
        vector<vector<int>>res;
        map<int,int>mp;
        int n=nums.size();
        permu(nums,dp,res,mp,n);
        return res;
        
        
    }
};
